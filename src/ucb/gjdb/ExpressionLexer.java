/* The following code was generated by JFlex 1.4.1 on 9/9/14 4:20 PM */

// _line_ 1 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
/* Copyright (c) 2007, by Paul N. Hilfinger.  All Rights Reserved.
 * For licensing terms, see the file GJDB.LICENSES, Part 2, which must
 * accompany any redistribution of this file. */

package ucb.gjdb;

import java.util.*;
import java.io.StringReader;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

import static ucb.gjdb.ExpressionParser.*;
import static ucb.gjdb.CommandException.ERROR;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 9/9/14 4:20 PM from the specification file
 * <tt>/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf</tt>
 */
class ExpressionLexer {
// _line_ 27 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.java"

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
// _line_ 34 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.java"

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\0\1\1\1\23\22\0\1\1\1\55\1\17"+
    "\1\0\1\6\1\62\1\60\1\24\2\52\1\4\1\15\1\52\1\46"+
    "\1\50\1\2\1\10\3\22\4\11\2\7\1\52\1\52\1\56\1\54"+
    "\1\57\1\53\1\0\3\13\1\51\1\14\1\51\5\5\1\47\13\5"+
    "\1\12\2\5\1\64\1\16\1\65\1\63\1\5\1\0\1\31\1\25"+
    "\1\35\1\37\1\30\1\21\1\43\1\36\1\42\2\5\1\27\1\5"+
    "\1\32\1\26\1\45\1\5\1\20\1\41\1\34\1\40\1\5\1\44"+
    "\1\12\1\33\1\5\1\52\1\61\1\52\1\53\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\5\2\6\1\3"+
    "\1\1\1\4\1\1\10\4\1\3\2\7\11\3\1\7"+
    "\1\10\1\0\1\11\1\12\1\13\1\14\2\0\1\6"+
    "\1\15\1\0\1\16\1\17\2\0\1\20\2\4\2\0"+
    "\14\4\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\2\0"+
    "\1\37\1\0\1\15\1\0\1\15\1\6\2\4\1\40"+
    "\2\0\3\4\1\41\7\4\1\42\1\4\1\43\1\44"+
    "\1\45\2\0\1\10\1\0\3\4\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\4\4\1\54\1\0\1\37\1\0"+
    "\1\55\1\56\2\4\1\57\1\60\1\4\2\0\1\4"+
    "\1\61\1\4\3\0\1\37\1\62\1\4\1\0\1\37"+
    "\1\4\1\0\1\4\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\66\0\154\0\242\0\330\0\u010e\0\u0144"+
    "\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\66"+
    "\0\66\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8"+
    "\0\u061e\0\u0654\0\u068a\0\u06c0\0\66\0\66\0\u06f6\0\u072c"+
    "\0\u072c\0\u0762\0\66\0\u0798\0\u07ce\0\66\0\66\0\u01e6"+
    "\0\u0804\0\66\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948"+
    "\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8"+
    "\0\u0b2e\0\u0b64\0\66\0\66\0\66\0\66\0\66\0\u0b9a"+
    "\0\66\0\u0bd0\0\66\0\66\0\66\0\66\0\66\0\66"+
    "\0\u0654\0\u0c06\0\66\0\u0c3c\0\u0c72\0\u0ca8\0\66\0\u0cde"+
    "\0\u0d14\0\u0d4a\0\66\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58"+
    "\0\330\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2"+
    "\0\330\0\u1008\0\66\0\66\0\u103e\0\u1074\0\u10aa\0\66"+
    "\0\u10e0\0\u1116\0\u114c\0\u1182\0\330\0\330\0\330\0\330"+
    "\0\330\0\330\0\u11b8\0\u11ee\0\u1224\0\u125a\0\66\0\u1290"+
    "\0\u1074\0\u12c6\0\330\0\330\0\u12fc\0\u1332\0\330\0\330"+
    "\0\u1368\0\u139e\0\u13d4\0\u140a\0\330\0\u1440\0\u1476\0\u14ac"+
    "\0\u14e2\0\u139e\0\330\0\u1518\0\u154e\0\u10aa\0\u1584\0\u15ba"+
    "\0\u15f0\0\330";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\10\3\6\1\12\1\2\1\13\1\6\1\14"+
    "\1\10\1\3\1\15\1\16\1\6\1\17\2\6\1\20"+
    "\1\6\1\21\1\22\1\6\1\23\1\6\1\24\1\25"+
    "\3\6\1\26\1\6\1\27\1\6\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\30\70\0\1\43\1\0\1\44\47\0\1\45\65\0"+
    "\1\46\16\0\10\6\3\0\3\6\2\0\21\6\1\0"+
    "\1\6\1\0\1\6\21\0\1\47\1\0\3\50\3\47"+
    "\3\0\2\47\1\50\2\0\21\47\1\51\1\47\1\0"+
    "\1\47\23\0\3\10\2\0\1\52\5\0\1\10\4\0"+
    "\1\53\1\52\16\0\1\53\1\54\24\0\3\10\1\55"+
    "\1\0\1\52\5\0\1\10\4\0\1\53\1\52\16\0"+
    "\1\53\1\54\32\0\1\56\36\0\1\57\11\0\3\60"+
    "\1\0\12\60\1\61\1\62\3\60\1\0\42\60\5\0"+
    "\10\6\3\0\3\6\2\0\2\6\1\63\1\6\1\64"+
    "\14\6\1\0\1\6\1\0\1\6\14\0\3\65\1\0"+
    "\12\65\1\66\4\65\2\0\41\65\5\0\10\6\3\0"+
    "\3\6\2\0\1\6\1\67\4\6\1\70\12\6\1\0"+
    "\1\6\1\0\1\6\21\0\10\6\3\0\3\6\2\0"+
    "\1\6\1\71\17\6\1\0\1\6\1\0\1\6\21\0"+
    "\10\6\3\0\3\6\2\0\3\6\1\72\7\6\1\73"+
    "\5\6\1\0\1\6\1\0\1\6\21\0\10\6\3\0"+
    "\1\74\2\6\2\0\11\6\1\75\7\6\1\0\1\6"+
    "\1\0\1\6\21\0\10\6\3\0\3\6\2\0\11\6"+
    "\1\76\7\6\1\0\1\6\1\0\1\6\21\0\10\6"+
    "\3\0\3\6\2\0\1\6\1\77\17\6\1\0\1\6"+
    "\1\0\1\6\21\0\10\6\3\0\3\6\2\0\11\6"+
    "\1\100\1\6\1\101\5\6\1\0\1\6\1\0\1\6"+
    "\21\0\10\6\3\0\3\6\2\0\5\6\1\102\13\6"+
    "\1\0\1\6\1\0\1\6\62\0\1\103\5\0\1\104"+
    "\20\0\3\54\10\0\1\54\117\0\1\105\65\0\1\106"+
    "\65\0\1\107\1\0\1\110\63\0\1\111\2\0\1\112"+
    "\62\0\1\113\3\0\1\114\61\0\1\115\4\0\1\116"+
    "\60\0\1\117\65\0\1\120\12\0\1\121\1\122\1\121"+
    "\17\0\1\121\41\0\1\123\3\43\1\0\62\43\4\44"+
    "\1\124\61\44\5\0\10\47\3\0\3\47\2\0\21\47"+
    "\1\0\1\47\1\0\1\47\23\0\3\50\10\0\1\50"+
    "\52\0\3\125\3\0\1\126\4\0\1\125\23\0\1\126"+
    "\26\0\3\54\2\0\1\52\4\0\1\127\1\54\5\0"+
    "\1\52\6\0\1\127\11\0\1\127\23\0\3\130\1\0"+
    "\2\130\4\0\2\130\2\0\1\130\2\0\2\130\3\0"+
    "\1\130\1\0\1\130\11\0\1\130\24\0\2\60\4\0"+
    "\5\60\2\0\1\60\4\0\1\60\1\0\1\60\36\0"+
    "\10\6\3\0\3\6\2\0\1\6\1\131\17\6\1\0"+
    "\1\6\1\0\1\6\21\0\10\6\3\0\3\6\2\0"+
    "\2\6\1\132\16\6\1\0\1\6\1\0\1\6\40\0"+
    "\1\133\51\0\1\134\1\135\4\0\1\65\1\0\2\65"+
    "\1\134\1\0\2\65\4\0\1\65\1\0\1\65\36\0"+
    "\10\6\3\0\3\6\2\0\1\6\1\136\17\6\1\0"+
    "\1\6\1\0\1\6\21\0\10\6\3\0\3\6\2\0"+
    "\7\6\1\137\11\6\1\0\1\6\1\0\1\6\21\0"+
    "\10\6\3\0\3\6\2\0\5\6\1\140\13\6\1\0"+
    "\1\6\1\0\1\6\21\0\10\6\3\0\3\6\2\0"+
    "\17\6\1\141\1\6\1\0\1\6\1\0\1\6\21\0"+
    "\10\6\3\0\3\6\2\0\2\6\1\142\16\6\1\0"+
    "\1\6\1\0\1\6\21\0\10\6\3\0\3\6\2\0"+
    "\13\6\1\143\5\6\1\0\1\6\1\0\1\6\21\0"+
    "\10\6\3\0\3\6\2\0\15\6\1\144\3\6\1\0"+
    "\1\6\1\0\1\6\21\0\10\6\3\0\3\6\2\0"+
    "\4\6\1\145\14\6\1\0\1\6\1\0\1\6\21\0"+
    "\10\6\3\0\3\6\2\0\13\6\1\146\5\6\1\0"+
    "\1\6\1\0\1\6\21\0\10\6\3\0\3\6\2\0"+
    "\1\6\1\147\17\6\1\0\1\6\1\0\1\6\21\0"+
    "\10\6\3\0\3\6\2\0\20\6\1\150\1\0\1\6"+
    "\1\0\1\6\21\0\10\6\3\0\3\6\2\0\7\6"+
    "\1\151\4\6\1\152\4\6\1\0\1\6\1\0\1\6"+
    "\70\0\1\153\65\0\1\154\2\0\1\155\10\0\1\156"+
    "\1\0\1\157\61\0\2\44\1\160\1\44\1\161\61\44"+
    "\7\0\3\125\7\0\1\127\1\125\14\0\1\127\11\0"+
    "\1\127\23\0\3\125\10\0\1\125\52\0\3\130\1\0"+
    "\2\130\4\0\2\130\2\0\1\130\1\0\1\53\2\130"+
    "\3\0\1\130\1\0\1\130\7\0\1\53\1\0\1\130"+
    "\21\0\10\6\3\0\3\6\2\0\4\6\1\162\14\6"+
    "\1\0\1\6\1\0\1\6\21\0\10\6\3\0\3\6"+
    "\2\0\14\6\1\163\4\6\1\0\1\6\1\0\1\6"+
    "\24\0\2\135\10\0\1\135\1\0\1\133\51\0\2\65"+
    "\10\0\1\65\1\0\1\133\46\0\10\6\3\0\3\6"+
    "\2\0\2\6\1\164\16\6\1\0\1\6\1\0\1\6"+
    "\21\0\10\6\3\0\3\6\2\0\3\6\1\165\15\6"+
    "\1\0\1\6\1\0\1\6\21\0\10\6\3\0\3\6"+
    "\2\0\16\6\1\166\2\6\1\0\1\6\1\0\1\6"+
    "\21\0\10\6\3\0\3\6\2\0\2\6\1\167\16\6"+
    "\1\0\1\6\1\0\1\6\21\0\10\6\3\0\3\6"+
    "\2\0\3\6\1\170\15\6\1\0\1\6\1\0\1\6"+
    "\21\0\10\6\3\0\3\6\2\0\14\6\1\171\4\6"+
    "\1\0\1\6\1\0\1\6\21\0\10\6\3\0\1\172"+
    "\2\6\2\0\21\6\1\0\1\6\1\0\1\6\21\0"+
    "\10\6\3\0\3\6\2\0\1\173\20\6\1\0\1\6"+
    "\1\0\1\6\21\0\10\6\3\0\1\174\2\6\2\0"+
    "\21\6\1\0\1\6\1\0\1\6\21\0\10\6\3\0"+
    "\3\6\2\0\3\6\1\175\15\6\1\0\1\6\1\0"+
    "\1\6\21\0\10\6\3\0\3\6\2\0\7\6\1\176"+
    "\11\6\1\0\1\6\1\0\1\6\70\0\1\177\11\0"+
    "\2\156\1\200\1\121\61\156\1\201\4\157\1\202\61\157"+
    "\2\44\1\0\1\44\1\161\61\44\5\0\10\6\3\0"+
    "\3\6\2\0\7\6\1\203\11\6\1\0\1\6\1\0"+
    "\1\6\21\0\10\6\3\0\3\6\2\0\3\6\1\204"+
    "\15\6\1\0\1\6\1\0\1\6\21\0\10\6\3\0"+
    "\3\6\2\0\3\6\1\205\15\6\1\0\1\6\1\0"+
    "\1\6\21\0\10\6\3\0\3\6\2\0\2\6\1\206"+
    "\16\6\1\0\1\6\1\0\1\6\21\0\10\6\3\0"+
    "\3\6\2\0\7\6\1\207\11\6\1\0\1\6\1\0"+
    "\1\6\21\0\10\6\3\0\1\210\2\6\2\0\21\6"+
    "\1\0\1\6\1\0\1\6\21\0\10\6\3\0\3\6"+
    "\2\0\4\6\1\211\14\6\1\0\1\6\1\0\1\6"+
    "\14\0\2\156\1\200\1\121\1\212\60\156\1\201\2\157"+
    "\1\121\1\157\1\213\61\157\5\0\10\6\3\0\3\6"+
    "\2\0\4\6\1\214\14\6\1\0\1\6\1\0\1\6"+
    "\21\0\10\6\3\0\3\6\2\0\3\6\1\215\15\6"+
    "\1\0\1\6\1\0\1\6\21\0\10\6\3\0\3\6"+
    "\2\0\5\6\1\216\13\6\1\0\1\6\1\0\1\6"+
    "\14\0\2\212\1\217\1\220\1\221\60\212\1\222\2\157"+
    "\1\0\1\157\1\213\61\157\5\0\10\6\3\0\3\6"+
    "\2\0\5\6\1\223\13\6\1\0\1\6\1\0\1\6"+
    "\21\0\10\6\3\0\3\6\2\0\10\6\1\224\10\6"+
    "\1\0\1\6\1\0\1\6\14\0\2\212\1\217\1\220"+
    "\61\212\1\222\1\157\1\220\1\225\1\220\1\202\16\157"+
    "\1\220\41\157\1\226\2\212\1\200\1\220\1\221\60\212"+
    "\1\222\5\0\10\6\3\0\3\6\2\0\3\6\1\227"+
    "\15\6\1\0\1\6\1\0\1\6\14\0\2\157\1\212"+
    "\1\157\1\230\61\157\5\0\10\6\3\0\3\6\2\0"+
    "\1\6\1\231\17\6\1\0\1\6\1\0\1\6\14\0"+
    "\2\157\1\220\1\157\1\202\61\157\5\0\10\6\3\0"+
    "\1\6\1\232\1\6\2\0\21\6\1\0\1\6\1\0"+
    "\1\6\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5670];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

// _line_ 295 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.java"

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\24\1\2\11\12\1\1\0\2\11\2\1"+
    "\2\0\1\11\1\1\1\0\2\11\2\0\1\11\2\1"+
    "\2\0\14\1\5\11\1\1\1\11\1\1\6\11\2\0"+
    "\1\11\1\0\1\1\1\0\1\11\3\1\1\11\2\0"+
    "\15\1\2\11\1\1\2\0\1\11\1\0\15\1\1\11"+
    "\1\0\1\1\1\0\7\1\2\0\3\1\3\0\3\1"+
    "\1\0\2\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

// _line_ 342 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.java"
  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
// _line_ 21 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
    ExpressionLexer (String src) {
	this (unicodeConvert (src), false);
    }

    private ExpressionLexer (String src, boolean dummy) {
	this (new StringReader (src));
	uncommentedSrc = new StringBuilder (src);
	charsRemoved = 0;
    }

    String lexeme;

    private void setVal (String val) {
	lexeme = val;
    }

    private int symbol (String val) {
        setVal (val);
	return ExpressionParser.findQuotedToken (val);
    }

    String uncommentedSource () {
	return uncommentedSrc.toString ().trim ();
    }

    private StringBuilder uncommentedSrc;
    private int charsRemoved;

    private static Pattern UNICODE_ESCAPE = 
	Pattern.compile ("\\\\[uU]+([0-9a-fA-F]{4})");

    static String unicodeConvert (String S) {
	Matcher m = UNICODE_ESCAPE.matcher (S);
	if (!m.find ())
	    return S;
	StringBuilder R = new StringBuilder ();
	int start;
	start = 0;
        do {
	    R.append (S.substring (start, m.start ()));
	    R.append ((char) Integer.parseInt (m.group (1), 16));
	    start = m.end ();
	} while (m.find ());
	R.append (S.substring (start));
	return R.toString ();
    }


// _line_ 442 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.java"

  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ExpressionLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  ExpressionLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }
// _line_ 481 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.java"


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
// _line_ 627 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.java"
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
// _line_ 637 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.java"
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
// _line_ 650 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.java"
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


// _line_ 658 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.java"
  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
// _line_ 667 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.java"
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
// _line_ 681 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.java"

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

// _line_ 688 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.java"
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;

// _line_ 695 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.java"

      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
// _line_ 730 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.java"
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
// _line_ 734 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.java"
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
// _line_ 742 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.java"

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 22: 
          { 
// _line_ 130 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("<<"); 
          }
        case 52: break;
        case 17: 
          { 
// _line_ 147 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("--"); 
          }
        case 53: break;
        case 32: 
          { 
// _line_ 113 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 setVal (yytext ()); return CHARLIT; 
          }
        case 54: break;
        case 21: 
          { 
// _line_ 128 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("<="); 
          }
        case 55: break;
        case 27: 
          { 
// _line_ 143 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("|="); 
          }
        case 56: break;
        case 4: 
          { 
// _line_ 107 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 setVal (yytext ()); return IDENT; 
          }
        case 57: break;
        case 10: 
          { 
// _line_ 138 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("*="); 
          }
        case 58: break;
        case 45: 
          { 
// _line_ 96 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("float"); 
          }
        case 59: break;
        case 29: 
          { 
// _line_ 140 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("%="); 
          }
        case 60: break;
        case 6: 
          { 
// _line_ 117 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 setVal (yytext ()); return INTLIT; 
          }
        case 61: break;
        case 48: 
          { 
// _line_ 103 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("super"); 
          }
        case 62: break;
        case 46: 
          { 
// _line_ 95 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("false"); 
          }
        case 63: break;
        case 12: 
          { 
// _line_ 109 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 setVal (yytext ()); return HISTORYVAR; 
          }
        case 64: break;
        case 18: 
          { 
// _line_ 137 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("-="); 
          }
        case 65: break;
        case 25: 
          { 
// _line_ 142 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("&="); 
          }
        case 66: break;
        case 5: 
          { 
// _line_ 110 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 setVal ("$0"); return HISTORYVAR; 
          }
        case 67: break;
        case 13: 
          { 
// _line_ 121 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 setVal (yytext ()); return FLOATLIT; 
          }
        case 68: break;
        case 35: 
          { 
// _line_ 144 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("<<="); 
          }
        case 69: break;
        case 23: 
          { 
// _line_ 129 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol (">="); 
          }
        case 70: break;
        case 3: 
          { 
// _line_ 124 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return yycharat (0); 
          }
        case 71: break;
        case 1: 
          { 
// _line_ 152 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 throw ERROR ("Unknown symbol: '%c'", yycharat (0)); 
          }
        case 72: break;
        case 34: 
          { 
// _line_ 98 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("int"); 
          }
        case 73: break;
        case 37: 
          { 
// _line_ 132 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol (">>>"); 
          }
        case 74: break;
        case 43: 
          { 
// _line_ 93 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("char"); 
          }
        case 75: break;
        case 11: 
          { 
// _line_ 108 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 setVal (yytext ()); return INTERNALVAR; 
          }
        case 76: break;
        case 33: 
          { 
// _line_ 100 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("new"); 
          }
        case 77: break;
        case 50: 
          { 
// _line_ 91 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("boolean"); 
          }
        case 78: break;
        case 49: 
          { 
// _line_ 94 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("double"); 
          }
        case 79: break;
        case 31: 
          { 
// _line_ 150 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("[]"); 
          }
        case 80: break;
        case 51: 
          { 
// _line_ 97 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("instanceof"); 
          }
        case 81: break;
        case 44: 
          { 
// _line_ 146 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol (">>>="); 
          }
        case 82: break;
        case 42: 
          { 
// _line_ 104 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("this"); 
          }
        case 83: break;
        case 26: 
          { 
// _line_ 133 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("&&"); 
          }
        case 84: break;
        case 41: 
          { 
// _line_ 105 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("true"); 
          }
        case 85: break;
        case 40: 
          { 
// _line_ 101 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("null"); 
          }
        case 86: break;
        case 36: 
          { 
// _line_ 145 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol (">>="); 
          }
        case 87: break;
        case 20: 
          { 
// _line_ 127 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("!="); 
          }
        case 88: break;
        case 7: 
          { 
// _line_ 123 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return yycharat (0); 
          }
        case 89: break;
        case 24: 
          { 
// _line_ 131 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol (">>"); 
          }
        case 90: break;
        case 28: 
          { 
// _line_ 134 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("||"); 
          }
        case 91: break;
        case 39: 
          { 
// _line_ 99 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("long"); 
          }
        case 92: break;
        case 16: 
          { 
// _line_ 112 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 setVal (yytext ()); return STRINGLIT; 
          }
        case 93: break;
        case 14: 
          { 
// _line_ 148 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("++"); 
          }
        case 94: break;
        case 2: 
          { 
// _line_ 86 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 
          }
        case 95: break;
        case 38: 
          { 
// _line_ 92 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("byte"); 
          }
        case 96: break;
        case 47: 
          { 
// _line_ 102 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("short"); 
          }
        case 97: break;
        case 30: 
          { 
// _line_ 141 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("^="); 
          }
        case 98: break;
        case 19: 
          { 
// _line_ 126 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("=="); 
          }
        case 99: break;
        case 8: 
          { 
// _line_ 87 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 uncommentedSrc.delete (yychar - charsRemoved, 
					 yychar - charsRemoved + yylength ()); 
		  charsRemoved += yylength (); 
          }
        case 100: break;
        case 15: 
          { 
// _line_ 136 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("+="); 
          }
        case 101: break;
        case 9: 
          { 
// _line_ 139 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.jf"
 return symbol ("/="); 
          }
        case 102: break;
// _line_ 1053 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.java"
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
// _line_ 1058 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.java"
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
// _line_ 1062 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.java"
          }
      }
    }
  }

// _line_ 1068 "/home/cs/hilfingr/src/gjdb/src/ucb/gjdb/ExpressionLexer.java"

}
